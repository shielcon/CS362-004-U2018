        -:    0:Source:testDiscard.c
        -:    0:Graph:testDiscard.gcno
        -:    0:Data:testDiscard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define NOISY_TEST 1
        -:    9:
        1:   10:int main(){
        -:   11:        int r;
        -:   12:        int i;
        1:   13:        int seed = 1000;
        1:   14:        int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   15:	int trashFlag = 0;
        1:   16:	int trashFlag2 = 1;
        -:   17:
        1:   18:        int numPlayer = 2;
        -:   19:        struct gameState G;
        1:   20:        int failures = 0;
        -:   21:
        1:   22:        memset(&G, 23, sizeof(struct gameState));
        1:   23:        r = initializeGame(numPlayer, k, seed, &G);
        -:   24:
        1:   25:	G.playedCardCount = 0;
        -:   26:
        1:   27:        G.handCount[0]=5;
        1:   28:        G.handCount[1]=1;
        -:   29:
        -:   30:	int adventurers[5];
        -:   31:
        1:   32:	memcpy(G.hand[0], adventurers, sizeof(int) * 5);
        1:   33:	G.hand[1][0] = adventurer;
        -:   34:
        -:   35:	//standard discard procedure. Both players discard with the trashflag set to 0
        -:   36:
        -:   37:
        1:   38:	discardCard(4, 0, &G, trashFlag);
        1:   39:	discardCard(0, 1, &G, trashFlag);
        -:   40:
        1:   41:	printf("playedCards should contain 2 cards. It contains %d cards\n", G.playedCardCount);
        -:   42:
        1:   43:	if (G.playedCardCount != 2 || G.playedCards[G.playedCardCount-1] != adventurer){
    #####:   44:		printf("test failed\n");
    #####:   45:		printf("%d\n", G.playedCards[G.playedCardCount - 1]);
    #####:   46:		failures++;
        -:   47:	}
        -:   48:
        -:   49:	//discard without the trashflag set. Played cards should stay the same,
        -:   50:	//but the player should still lose the card
        1:   51:	discardCard(3, 0, &G, trashFlag2);
        -:   52:	
        1:   53:	printf("PlayedCards should still contain 2 cards, player 1 shoule have 3 remaining cards. PlayedCards = %d. Player 1's hand has %d cards\n", G.playedCardCount, G.handCount[0]);
        -:   54:
        1:   55:	if (G.handCount[0] != 3 || G.playedCardCount != 2){
    #####:   56:		printf("test failed\n");
    #####:   57:		failures++;
        -:   58:	}
        -:   59:
        1:   60:	G.hand[0][2] = smithy;
        1:   61:	G.hand[0][1] = curse;
        1:   62:	G.hand[0][0] = adventurer;
        -:   63:
        -:   64:	//discarding curse from hand
        1:   65:	discardCard(1, 0, &G, trashFlag2);
        -:   66:
        1:   67:	printf("player 1 shoule have an adventurer and a smithy. The curse should not be in the player's hand\n");
        -:   68:
        3:   69:	for (i = 0; i < G.handCount[0]; i++){
        2:   70:		printf("card: %d\n", G.hand[0][i]);
        2:   71:		if (G.hand[0][i] == curse){
    #####:   72:			printf("test failed\n");
    #####:   73:			failures++;
        -:   74:		}
        -:   75:	}
        -:   76:
        1:   77:	printf("total failures: %d\n", failures);
        -:   78:
        1:   79:	return 0;	
        -:   80:
        -:   81:}
        -:   82:	
        -:   83:
        -:   84:	
        -:   85:
        -:   86:	
        -:   87:	
        -:   88:	
